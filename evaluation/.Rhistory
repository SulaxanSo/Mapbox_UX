data <- rbind(data, gs_wl_size_5_sample)
data <- rbind(data, gs_wl_size_6_sample)
data <- rbind(data, gs_wl_size_7_sample)
data <- rbind(data, gs_wl_size_8_sample)
data <- rbind(data, gs_wl_size_9_sample)
data <- rbind(data, gs_wl_size_10_sample)
x <- data$size_distance
y <- data$performance
fit1 <- lm(y~x, data=data)
fit2 <- lm(y~poly(x,2,raw=TRUE), data=data)
fit3 <- lm(y~poly(x,3,raw=TRUE), data=data)
fit4 <- lm(y~poly(x,4,raw=TRUE), data=data)
fit5 <- lm(y~poly(x,5,raw=TRUE), data=data)
bic1 = BIC(fit1)
bic2 = BIC(fit2)
bic3 = BIC(fit3)
bic4 = BIC(fit4)
bic5 = BIC(fit5)
bic_array <- c(bic1, bic2, bic3, bic4, bic5)
print(bic_array)
min_bic <- min(bic_array)
if (min_bic == bic1) {
fit = fit1
bic1_zahler = bic1_zahler +1
} else if (min_bic == bic2) {
fit = fit2
bic2_zahler = bic2_zahler +1
} else if  (min_bic == bic3) {
fit = fit3
bic3_zahler = bic3_zahler +1
} else if  (min_bic == bic4) {
fit = fit4
bic4_zahler = bic4_zahler +1
}else {
fit = fit5
bic5_zahler = bic5_zahler +1
}
print(fit$coefficients)
data$predlm = predict(fit)
print(ggplot(gs_wl, aes(x=size_distance, y=performance)) +
geom_point(size=2) +
geom_line(data, mapping=aes(y = predlm, color = "Predictive model")) +
geom_line(data, mapping=aes(y = performance, color = "Selected values")) +
scale_colour_manual("",
breaks = c("Predictive model", "Selected values"),
values = c("blue", "red")) +
scale_x_continuous(breaks = seq(2.5, 25, by=2.5)) +
scale_y_continuous(breaks = c(1:7), limits = c(1,7)) +
labs(x="Size distance", y="Perceived performance") +
ggtitle("Perceived performance on Graduated Symbol Maps") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position="bottom"))
length_dim = dim(summary(fit)$coefficients)[1]
function_exp = ""
for(i in 1:length_dim){
if(i != length_dim){
function_exp = paste(function_exp, subset(summary(fit)$coefficients, select = c("Estimate"))[i,], "*x^", i-1, "+", sep="")
}else{
function_exp = paste(function_exp, subset(summary(fit)$coefficients, select = c("Estimate"))[i,], "*x^", i-1, sep="")
}
}
print(function_exp)
function_exp <- parse(text = function_exp)
derivative = D(function_exp, 'x')
color_distances = c (2, 3, 4, 5, 6, 7,8, 9, 10, 11)
cd_derivative_values <- c()
for (x in color_distances)
{
#print(eval(derivative))
cd_derivative_values <- append(cd_derivative_values, eval(derivative))
}
print(cd_derivative_values)
positive = 0
negative = 0
for (x in cd_derivative_values)
{
if(x >= 0){
positive = 1
}else{
negative = 1
}
}
if(positive == 1 & negative == 1){
non_monoton_function = non_monoton_function +1
}else{
monoton_function = monoton_function +1
}
}
print(paste("non monoton " , non_monoton_function))
print(paste("monoton " , monoton_function))
print(paste("bic1 " , bic1_zahler))
print(paste("bic2 " , bic2_zahler))
print(paste("bic3 " , bic3_zahler))
print(paste("bic4 " , bic4_zahler))
print(paste("bic5 " , bic5_zahler))
n <- 2
monoton_function <- 0
non_monoton_function <- 0
bic1_zahler <- 0
bic2_zahler <- 0
bic3_zahler <- 0
bic4_zahler <- 0
bic5_zahler <- 0
gs_wl <- read.csv(file = "gs_workload.csv")
gs_wl_size_1 <- gs_wl %>% filter(size_distance == 2.5)
gs_wl_size_2 <- gs_wl %>% filter(size_distance == 5)
gs_wl_size_3 <- gs_wl %>% filter(size_distance == 7.5)
gs_wl_size_4 <- gs_wl %>% filter(size_distance == 10)
gs_wl_size_5 <- gs_wl %>% filter(size_distance == 12.5)
gs_wl_size_6 <- gs_wl %>% filter(size_distance == 15)
gs_wl_size_7 <- gs_wl %>% filter(size_distance == 17.5)
gs_wl_size_8 <- gs_wl %>% filter(size_distance == 20)
gs_wl_size_9 <- gs_wl %>% filter(size_distance == 22.5)
gs_wl_size_10 <- gs_wl %>% filter(size_distance == 25)
for(i in 1:n) {
print(i)
data <- data.frame(participants_id = numeric(0),
size_distance = numeric(0),
mental_demand = numeric(0),
performance = numeric(0),
effort = numeric(0),
frustration = numeric(0))
gs_wl_size_1_sample <- gs_wl_size_1 %>% sample_n(1, replace = FALSE)
gs_wl_size_2_sample <- gs_wl_size_2 %>% sample_n(1, replace = FALSE)
gs_wl_size_3_sample <- gs_wl_size_3 %>% sample_n(1, replace = FALSE)
gs_wl_size_4_sample <- gs_wl_size_4 %>% sample_n(1, replace = FALSE)
gs_wl_size_5_sample <- gs_wl_size_5 %>% sample_n(1, replace = FALSE)
gs_wl_size_6_sample <- gs_wl_size_6 %>% sample_n(1, replace = FALSE)
gs_wl_size_7_sample <- gs_wl_size_7 %>% sample_n(1, replace = FALSE)
gs_wl_size_8_sample <- gs_wl_size_8 %>% sample_n(1, replace = FALSE)
gs_wl_size_9_sample <- gs_wl_size_9 %>% sample_n(1, replace = FALSE)
gs_wl_size_10_sample <- gs_wl_size_10 %>% sample_n(1, replace = FALSE)
data <- rbind(data, gs_wl_size_1_sample)
data <- rbind(data, gs_wl_size_2_sample)
data <- rbind(data, gs_wl_size_3_sample)
data <- rbind(data, gs_wl_size_4_sample)
data <- rbind(data, gs_wl_size_5_sample)
data <- rbind(data, gs_wl_size_6_sample)
data <- rbind(data, gs_wl_size_7_sample)
data <- rbind(data, gs_wl_size_8_sample)
data <- rbind(data, gs_wl_size_9_sample)
data <- rbind(data, gs_wl_size_10_sample)
x <- data$size_distance
y <- data$effort
fit1 <- lm(y~x, data=data)
fit2 <- lm(y~poly(x,2,raw=TRUE), data=data)
fit3 <- lm(y~poly(x,3,raw=TRUE), data=data)
fit4 <- lm(y~poly(x,4,raw=TRUE), data=data)
fit5 <- lm(y~poly(x,5,raw=TRUE), data=data)
bic1 = BIC(fit1)
bic2 = BIC(fit2)
bic3 = BIC(fit3)
bic4 = BIC(fit4)
bic5 = BIC(fit5)
bic_array <- c(bic1, bic2, bic3, bic4, bic5)
print(bic_array)
min_bic <- min(bic_array)
if (min_bic == bic1) {
fit = fit1
bic1_zahler = bic1_zahler +1
} else if (min_bic == bic2) {
fit = fit2
bic2_zahler = bic2_zahler +1
} else if  (min_bic == bic3) {
fit = fit3
bic3_zahler = bic3_zahler +1
} else if  (min_bic == bic4) {
fit = fit4
bic4_zahler = bic4_zahler +1
}else {
fit = fit5
bic5_zahler = bic5_zahler +1
}
print(fit$coefficients)
data$predlm = predict(fit)
print(ggplot(gs_wl, aes(x=size_distance, y=effort)) +
geom_point(size=2) +
geom_line(data, mapping=aes(y = predlm, color = "Predictive model")) +
geom_line(data, mapping=aes(y = effort, color = "Selected values")) +
scale_colour_manual("",
breaks = c("Predictive model", "Selected values"),
values = c("blue", "red")) +
scale_x_continuous(breaks = seq(2.5, 25, by=2.5)) +
scale_y_continuous(breaks = c(1:7), limits = c(1,7)) +
labs(x="Size distance", y="Perceived effort") +
ggtitle("Perceived effort on Graduated Symbol Maps") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position="bottom"))
length_dim = dim(summary(fit)$coefficients)[1]
function_exp = ""
for(i in 1:length_dim){
if(i != length_dim){
function_exp = paste(function_exp, subset(summary(fit)$coefficients, select = c("Estimate"))[i,], "*x^", i-1, "+", sep="")
}else{
function_exp = paste(function_exp, subset(summary(fit)$coefficients, select = c("Estimate"))[i,], "*x^", i-1, sep="")
}
}
print(function_exp)
function_exp <- parse(text = function_exp)
derivative = D(function_exp, 'x')
color_distances = c (2, 3, 4, 5, 6, 7,8, 9, 10, 11)
cd_derivative_values <- c()
for (x in color_distances)
{
#print(eval(derivative))
cd_derivative_values <- append(cd_derivative_values, eval(derivative))
}
print(cd_derivative_values)
positive = 0
negative = 0
for (x in cd_derivative_values)
{
if(x >= 0){
positive = 1
}else{
negative = 1
}
}
if(positive == 1 & negative == 1){
non_monoton_function = non_monoton_function +1
}else{
monoton_function = monoton_function +1
}
}
print(paste("non monoton " , non_monoton_function))
print(paste("monoton " , monoton_function))
print(paste("bic1 " , bic1_zahler))
print(paste("bic2 " , bic2_zahler))
print(paste("bic3 " , bic3_zahler))
print(paste("bic4 " , bic4_zahler))
print(paste("bic5 " , bic5_zahler))
View(gs_wl)
n <- 2
monoton_function <- 0
non_monoton_function <- 0
bic1_zahler <- 0
bic2_zahler <- 0
bic3_zahler <- 0
bic4_zahler <- 0
bic5_zahler <- 0
gs_wl <- read.csv(file = "gs_workload.csv")
gs_wl_size_1 <- gs_wl %>% filter(size_distance == 2.5)
gs_wl_size_2 <- gs_wl %>% filter(size_distance == 5)
gs_wl_size_3 <- gs_wl %>% filter(size_distance == 7.5)
gs_wl_size_4 <- gs_wl %>% filter(size_distance == 10)
gs_wl_size_5 <- gs_wl %>% filter(size_distance == 12.5)
gs_wl_size_6 <- gs_wl %>% filter(size_distance == 15)
gs_wl_size_7 <- gs_wl %>% filter(size_distance == 17.5)
gs_wl_size_8 <- gs_wl %>% filter(size_distance == 20)
gs_wl_size_9 <- gs_wl %>% filter(size_distance == 22.5)
gs_wl_size_10 <- gs_wl %>% filter(size_distance == 25)
for(i in 1:n) {
print(i)
data <- data.frame(participants_id = numeric(0),
size_distance = numeric(0),
mental_demand = numeric(0),
performance = numeric(0),
effort = numeric(0),
frustration = numeric(0))
gs_wl_size_1_sample <- gs_wl_size_1 %>% sample_n(1, replace = FALSE)
gs_wl_size_2_sample <- gs_wl_size_2 %>% sample_n(1, replace = FALSE)
gs_wl_size_3_sample <- gs_wl_size_3 %>% sample_n(1, replace = FALSE)
gs_wl_size_4_sample <- gs_wl_size_4 %>% sample_n(1, replace = FALSE)
gs_wl_size_5_sample <- gs_wl_size_5 %>% sample_n(1, replace = FALSE)
gs_wl_size_6_sample <- gs_wl_size_6 %>% sample_n(1, replace = FALSE)
gs_wl_size_7_sample <- gs_wl_size_7 %>% sample_n(1, replace = FALSE)
gs_wl_size_8_sample <- gs_wl_size_8 %>% sample_n(1, replace = FALSE)
gs_wl_size_9_sample <- gs_wl_size_9 %>% sample_n(1, replace = FALSE)
gs_wl_size_10_sample <- gs_wl_size_10 %>% sample_n(1, replace = FALSE)
data <- rbind(data, gs_wl_size_1_sample)
data <- rbind(data, gs_wl_size_2_sample)
data <- rbind(data, gs_wl_size_3_sample)
data <- rbind(data, gs_wl_size_4_sample)
data <- rbind(data, gs_wl_size_5_sample)
data <- rbind(data, gs_wl_size_6_sample)
data <- rbind(data, gs_wl_size_7_sample)
data <- rbind(data, gs_wl_size_8_sample)
data <- rbind(data, gs_wl_size_9_sample)
data <- rbind(data, gs_wl_size_10_sample)
x <- data$size_distance
y <- data$frustration
fit1 <- lm(y~x, data=data)
fit2 <- lm(y~poly(x,2,raw=TRUE), data=data)
fit3 <- lm(y~poly(x,3,raw=TRUE), data=data)
fit4 <- lm(y~poly(x,4,raw=TRUE), data=data)
fit5 <- lm(y~poly(x,5,raw=TRUE), data=data)
bic1 = BIC(fit1)
bic2 = BIC(fit2)
bic3 = BIC(fit3)
bic4 = BIC(fit4)
bic5 = BIC(fit5)
bic_array <- c(bic1, bic2, bic3, bic4, bic5)
print(bic_array)
min_bic <- min(bic_array)
if (min_bic == bic1) {
fit = fit1
bic1_zahler = bic1_zahler +1
} else if (min_bic == bic2) {
fit = fit2
bic2_zahler = bic2_zahler +1
} else if  (min_bic == bic3) {
fit = fit3
bic3_zahler = bic3_zahler +1
} else if  (min_bic == bic4) {
fit = fit4
bic4_zahler = bic4_zahler +1
}else {
fit = fit5
bic5_zahler = bic5_zahler +1
}
print(fit$coefficients)
data$predlm = predict(fit)
print(ggplot(gs_wl, aes(x=size_distance, y=frustration)) +
geom_point(size=2) +
geom_line(data, mapping=aes(y = predlm, color = "Predictive model")) +
geom_line(data, mapping=aes(y = frustration, color = "Selected values")) +
scale_colour_manual("",
breaks = c("Predictive model", "Selected values"),
values = c("blue", "red")) +
scale_x_continuous(breaks = seq(2.5, 25, by=2.5)) +
scale_y_continuous(breaks = c(1:7), limits = c(1,7)) +
labs(x="Size distance", y="Perceived frustration") +
ggtitle("Perceived frustration on Graduated Symbol Maps") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position="bottom"))
length_dim = dim(summary(fit)$coefficients)[1]
function_exp = ""
for(i in 1:length_dim){
if(i != length_dim){
function_exp = paste(function_exp, subset(summary(fit)$coefficients, select = c("Estimate"))[i,], "*x^", i-1, "+", sep="")
}else{
function_exp = paste(function_exp, subset(summary(fit)$coefficients, select = c("Estimate"))[i,], "*x^", i-1, sep="")
}
}
print(function_exp)
function_exp <- parse(text = function_exp)
derivative = D(function_exp, 'x')
color_distances = c (2, 3, 4, 5, 6, 7,8, 9, 10, 11)
cd_derivative_values <- c()
for (x in color_distances)
{
#print(eval(derivative))
cd_derivative_values <- append(cd_derivative_values, eval(derivative))
}
print(cd_derivative_values)
positive = 0
negative = 0
for (x in cd_derivative_values)
{
if(x >= 0){
positive = 1
}else{
negative = 1
}
}
if(positive == 1 & negative == 1){
non_monoton_function = non_monoton_function +1
}else{
monoton_function = monoton_function +1
}
}
print(paste("non monoton " , non_monoton_function))
print(paste("monoton " , monoton_function))
print(paste("bic1 " , bic1_zahler))
print(paste("bic2 " , bic2_zahler))
print(paste("bic3 " , bic3_zahler))
print(paste("bic4 " , bic4_zahler))
print(paste("bic5 " , bic5_zahler))
library(ggplot2)
library(dplyr)
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
## Accuracy Choropleth Map
n <- 1048576
# n <- 2
monoton_function <- 0
non_monoton_function <- 0
bic1_zahler <- 0
bic2_zahler <- 0
bic3_zahler <- 0
bic4_zahler <- 0
bic5_zahler <- 0
ch_acc <- read.csv(file = "ch_acc.csv")
ch_acc_mean <- ch_acc %>% filter(!is.na(mean_accuracy))
ch_acc_mean_col_2 <- ch_acc_mean %>% filter(color_distance == 2)
ch_acc_mean_col_3 <- ch_acc_mean %>% filter(color_distance == 3)
ch_acc_mean_col_4 <- ch_acc_mean %>% filter(color_distance == 4)
ch_acc_mean_col_5 <- ch_acc_mean %>% filter(color_distance == 5)
ch_acc_mean_col_6 <- ch_acc_mean %>% filter(color_distance == 6)
ch_acc_mean_col_7 <- ch_acc_mean %>% filter(color_distance == 7)
ch_acc_mean_col_8 <- ch_acc_mean %>% filter(color_distance == 8)
ch_acc_mean_col_9 <- ch_acc_mean %>% filter(color_distance == 9)
ch_acc_mean_col_10 <- ch_acc_mean %>% filter(color_distance == 10)
ch_acc_mean_col_11 <- ch_acc_mean %>% filter(color_distance == 11)
for(i in 1:n) {
print(i)
data <- data.frame(participants_id = numeric(0),
color_distance = numeric(0),
accuracy = numeric(0),
mean_accuracy = numeric(0))
ch_acc_mean_col_2_sample <- ch_acc_mean_col_2 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_3_sample <- ch_acc_mean_col_3 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_4_sample <- ch_acc_mean_col_4 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_5_sample <- ch_acc_mean_col_5 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_6_sample <- ch_acc_mean_col_6 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_7_sample <- ch_acc_mean_col_7 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_8_sample <- ch_acc_mean_col_8 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_9_sample <- ch_acc_mean_col_9 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_10_sample <- ch_acc_mean_col_10 %>% sample_n(1, replace = FALSE)
ch_acc_mean_col_11_sample <- ch_acc_mean_col_11 %>% sample_n(1, replace = FALSE)
data <- rbind(data, ch_acc_mean_col_2_sample)
data <- rbind(data, ch_acc_mean_col_3_sample)
data <- rbind(data, ch_acc_mean_col_4_sample)
data <- rbind(data, ch_acc_mean_col_5_sample)
data <- rbind(data, ch_acc_mean_col_6_sample)
data <- rbind(data, ch_acc_mean_col_7_sample)
data <- rbind(data, ch_acc_mean_col_8_sample)
data <- rbind(data, ch_acc_mean_col_9_sample)
data <- rbind(data, ch_acc_mean_col_10_sample)
data <- rbind(data, ch_acc_mean_col_11_sample)
x <- data$color_distance
y <- data$mean_accuracy
fit1 <- lm(y~x, data=data)
fit2 <- lm(y~poly(x,2,raw=TRUE), data=data)
fit3 <- lm(y~poly(x,3,raw=TRUE), data=data)
fit4 <- lm(y~poly(x,4,raw=TRUE), data=data)
fit5 <- lm(y~poly(x,5,raw=TRUE), data=data)
bic1 = BIC(fit1)
bic2 = BIC(fit2)
bic3 = BIC(fit3)
bic4 = BIC(fit4)
bic5 = BIC(fit5)
bic_array <- c(bic1, bic2, bic3, bic4, bic5)
print(bic_array)
min_bic <- min(bic_array)
if (min_bic == bic1) {
fit = fit1
bic1_zahler = bic1_zahler +1
} else if (min_bic == bic2) {
fit = fit2
bic2_zahler = bic2_zahler +1
} else if  (min_bic == bic3) {
fit = fit3
bic3_zahler = bic3_zahler +1
} else if  (min_bic == bic4) {
fit = fit4
bic4_zahler = bic4_zahler +1
}else {
fit = fit5
bic5_zahler = bic5_zahler +1
}
# print(fit$coefficients)
#
# data$predlm = predict(fit)
# print(ggplot(ch_acc, aes(x=color_distance, y=mean_accuracy)) +
#         geom_point(size=2) +
#         geom_line(data, mapping=aes(y = predlm, color = "Predictive model")) +
#         geom_line(data, mapping=aes(y = mean_accuracy, color = "Selected values")) +
#         scale_colour_manual("",
#                             breaks = c("Predictive model", "Selected values"),
#                             values = c("blue", "red")) +
#         scale_x_continuous(breaks = c(2:11)) +
#         scale_y_continuous(breaks = seq(0, 100, by=10), limits = c(0,100)) +
#         labs(x="Color distance", y="Accuracy (in %)") +
#         ggtitle("Accuracy on Choropleth Maps") +
#         theme(plot.title = element_text(hjust = 0.5)) +
#         theme(legend.position="bottom"))
length_dim = dim(summary(fit)$coefficients)[1]
function_exp = ""
for(i in 1:length_dim){
if(i != length_dim){
function_exp = paste(function_exp, subset(summary(fit)$coefficients, select = c("Estimate"))[i,], "*x^", i-1, "+", sep="")
}else{
function_exp = paste(function_exp, subset(summary(fit)$coefficients, select = c("Estimate"))[i,], "*x^", i-1, sep="")
}
}
print(function_exp)
function_exp <- parse(text = function_exp)
derivative = D(function_exp, 'x')
color_distances = c (2, 3, 4, 5, 6, 7,8, 9, 10, 11)
cd_derivative_values <- c()
for (x in color_distances)
{
#print(eval(derivative))
cd_derivative_values <- append(cd_derivative_values, eval(derivative))
}
print(cd_derivative_values)
positive = 0
negative = 0
for (x in cd_derivative_values)
{
if(x >= 0){
positive = 1
}else{
negative = 1
}
}
if(positive == 1 & negative == 1){
non_monoton_function = non_monoton_function +1
}else{
monoton_function = monoton_function +1
}
}
print(paste("non monoton " , non_monoton_function))
print(paste("monoton " , monoton_function))
print(paste("bic1 " , bic1_zahler))
print(paste("bic2 " , bic2_zahler))
print(paste("bic3 " , bic3_zahler))
print(paste("bic4 " , bic4_zahler))
print(paste("bic5 " , bic5_zahler))
